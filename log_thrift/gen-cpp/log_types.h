/**
 * Autogenerated by Thrift Compiler (0.9.3)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef log_TYPES_H
#define log_TYPES_H

#include <iosfwd>

#include <thrift/Thrift.h>
#include <thrift/TApplicationException.h>
#include <thrift/protocol/TProtocol.h>
#include <thrift/transport/TTransport.h>

#include <thrift/cxxfunctional.h>




class LogInfo;

typedef struct _LogInfo__isset {
  _LogInfo__isset() : content(false) {}
  bool content :1;
} _LogInfo__isset;

class LogInfo {
 public:

  LogInfo(const LogInfo&);
  LogInfo& operator=(const LogInfo&);
  LogInfo() : name(), content() {
  }

  virtual ~LogInfo() throw();
  std::string name;
  std::string content;

  _LogInfo__isset __isset;

  void __set_name(const std::string& val);

  void __set_content(const std::string& val);

  bool operator == (const LogInfo & rhs) const
  {
    if (!(name == rhs.name))
      return false;
    if (__isset.content != rhs.__isset.content)
      return false;
    else if (__isset.content && !(content == rhs.content))
      return false;
    return true;
  }
  bool operator != (const LogInfo &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const LogInfo & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(LogInfo &a, LogInfo &b);

inline std::ostream& operator<<(std::ostream& out, const LogInfo& obj)
{
  obj.printTo(out);
  return out;
}



#endif
