/**
 * Autogenerated by Thrift Compiler (0.9.3)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#include "log_types.h"

#include <algorithm>
#include <ostream>

#include <thrift/TToString.h>




LogInfo::~LogInfo() throw() {
}


void LogInfo::__set_name(const std::string& val) {
  this->name = val;
}

void LogInfo::__set_content(const std::string& val) {
  this->content = val;
__isset.content = true;
}

uint32_t LogInfo::read(::apache::thrift::protocol::TProtocol* iprot) {

  apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_name = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->name);
          isset_name = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->content);
          this->__isset.content = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_name)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t LogInfo::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("LogInfo");

  xfer += oprot->writeFieldBegin("name", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeString(this->name);
  xfer += oprot->writeFieldEnd();

  if (this->__isset.content) {
    xfer += oprot->writeFieldBegin("content", ::apache::thrift::protocol::T_STRING, 2);
    xfer += oprot->writeString(this->content);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(LogInfo &a, LogInfo &b) {
  using ::std::swap;
  swap(a.name, b.name);
  swap(a.content, b.content);
  swap(a.__isset, b.__isset);
}

LogInfo::LogInfo(const LogInfo& other0) {
  name = other0.name;
  content = other0.content;
  __isset = other0.__isset;
}
LogInfo& LogInfo::operator=(const LogInfo& other1) {
  name = other1.name;
  content = other1.content;
  __isset = other1.__isset;
  return *this;
}
void LogInfo::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "LogInfo(";
  out << "name=" << to_string(name);
  out << ", " << "content="; (__isset.content ? (out << to_string(content)) : (out << "<null>"));
  out << ")";
}


